{"version":3,"sources":["components/singleCharacter.js","App.js","serviceWorker.js","index.js"],"names":["SingleCharacterQuery","gql","_templateObject","paginationButton","pageCount","setPage","currentPage","width","beginStart","beginStop","endStart","endStop","maxSide","maxMain","maxTotal","pageButtons","_loop","i","push","react_default","a","createElement","className","key","onClick","disabled","_loop2","_loop3","SingleCharacter","_useState","useState","_useState2","Object","slicedToArray","page","_useState3","_useState4","character","setCharacter","_useState5","_useState6","isOpen","toggle","_useState7","_useState8","setWidth","useEffect","window","innerWidth","addEventListener","Fragment","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","type","defaultValue","onChange","event","target","value","react_apollo_esm","variables","query","_ref","loading","error","_ref$data","data","_ref$data$characters","characters","_ref$data$characters$","info","next","prev","pages","count","results","role","aria-label","map","_ref2","name","id","image","status","species","gender","location","src","alt","client","ApolloClient","uri","App","components_singleCharacter","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29403768.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Query } from 'react-apollo'\nimport { gql } from 'apollo-boost';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand } from 'reactstrap';\nimport \"./singleCharacter.scss\";\n\nconst SingleCharacterQuery = gql`\nquery($page: Int!, $character: String!){\n  characters(page: $page, filter: {name: $character}){\n    info {\n      count\n      next\n      prev\n      pages\n    }\n    results {\n      name\n      id\n      image\n      status\n      species\n      type\n      gender\n      location {\n        name\n      }\n    }\n  }\n}\n`;\n\nconst SingleCharacter = () => {\n  const [page, setPage] = useState(1);\n  const [character, setCharacter] = useState(\"morty\");\n  const [isOpen, toggle] = useState(false);\n  const [width, setWidth] = useState(null);\n  useEffect(\n    () => {\n      setWidth(window.innerWidth);\n      window.addEventListener('resize', () => setWidth(window.innerWidth));\n    }, []\n  )\n  return (\n    <>\n      <Navbar color=\"dark\" dark expand=\"md\">\n        <NavbarBrand href=\"./\">Rick & Morty Characters</NavbarBrand>\n        <NavbarToggler onClick={() => toggle(!isOpen)} />\n        <Collapse isOpen={isOpen} navbar>\n          <form className=\"form-inline my-2 my-md-0\">\n            <input type=\"text\" defaultValue={character}\n              onChange={(event) => setCharacter(event.target.value)}\n            />\n          </form>\n        </Collapse>\n      </Navbar>\n      <Query variables={{ page, character }} query={SingleCharacterQuery}>\n\n        {(\n          {\n            loading,\n            error,\n            data: { characters: { info: { next, prev, pages, count } = {}, results } = {}\n            } = {}\n          }\n        ) => {\n          // console.log(loading, error, results);\n          if (loading) return <p>Loading...</p>\n          if (error) return <p>Error<span role=\"img\" aria-label=\"error\">ðŸ‘…</span></p>\n\n          next = next ? next : pages;\n          prev = prev ? prev : 1;\n          return (\n            <> {count && <p>Your search gave {count} results on {pages} pages.</p>}\n              <div className=\"row\">\n                {results ? results.map(\n                  ({ name, id, image, status, species, type, gender, location }) => (\n                    <div key={id} className=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\n                      <img src={image} alt={name} />\n                      <p className=\"character-name\">{name}</p>\n                      <ul>\n                        <li><span className=\"italic\">species:</span>{species}</li>\n                        {type && (<li><span className=\"italic\">type:</span>{type}</li>)}\n                        {gender && (<li><span className=\"italic\">gender:</span>{gender}</li>)}\n                        <li><span className=\"italic\">location:</span>{location.name}</li>\n                        {status && (<li><span className=\"italic\">status:</span> {status}</li>)}\n                      </ul>\n                    </div>\n                  )\n                ) : (<p>No Results</p>)}\n              </div>\n              {/* <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"prevnext\"> */}\n              {page === 1 ? (<button type=\"button\" className=\"btn btn-secondary\" disabled>Prev</button>) : (<button type=\"button\" className=\"btn btn-primary\" onClick={() => setPage(prev)}>Prev</button>)}\n              {page === pages ? (<button type=\"button\" className=\"btn btn-secondary\" disabled>Next</button>) : (<button type=\"button\" className=\"btn btn-primary\" onClick={() => setPage(next)}>Next</button>)}\n              {/* </div> */}\n\n              <div>\n                {paginationButton(pages, setPage, page, width)}\n              </div>\n            </>\n          );\n        }}\n\n      </Query>\n    </>\n  )\n}\n\nconst paginationButton = (pageCount, setPage, currentPage, width) => {\n  const pageButtons = [];\n  let beginStart, beginStop;\n  let endStart, endStop;\n  let maxSide, maxMain, maxTotal;\n  if (width > 768) {\n    maxTotal = 15;\n    maxMain = 5;\n    maxSide = 2;\n  } else if (width > 576) {\n    maxTotal = 11;\n    maxMain = 3;\n    maxSide = 2;\n  } else {\n    maxTotal = 7;\n    maxMain = 2;\n    maxSide = 1;\n  }\n  if (pageCount > maxTotal) {\n    if (currentPage <= maxMain) {\n      beginStart = null;\n      beginStop = 1;\n      endStart = 2 * maxMain + 1;\n      endStop = pageCount + 1 - maxSide;\n    } else if (currentPage >= pageCount - maxMain) {\n      beginStart = maxSide;\n      beginStop = currentPage - maxMain;\n      endStart = pageCount;\n      endStop = null;\n    } else {\n      beginStart = maxSide;\n      beginStop = currentPage - maxMain;\n      endStart = currentPage + maxMain;\n      endStop = pageCount + 1 - maxSide;\n    }\n  } else {\n    beginStart = null;\n    beginStop = 1;\n    endStart = pageCount;\n    endStop = null;\n  }\n  if (beginStart) {\n    for (let i = 1; i <= beginStart; i++) {\n      pageButtons.push(\n        <button className=\"btn btn-primary\"\n          key={i}\n          onClick={() => setPage(i)}\n        >{i}</button>\n      );\n    }\n    pageButtons.push(\n      <button className=\"btn btn-secondary\" disabled key=\"start\">...</button>\n    );\n  }\n  for (let i = beginStop; i <= endStart; i++) {\n    pageButtons.push(\n      <button className={currentPage === i ? \"btn active btn-secondary\" : \"btn btn-primary\"}\n        key={i}\n        onClick={() => setPage(i)}\n      >{i}</button>\n    );\n  }\n  if (endStop) {\n    pageButtons.push(<button className=\"btn btn-secondary\" key=\"end\" disabled>...</button>)\n    for (let i = endStop; i <= pageCount; i++) {\n      pageButtons.push(\n        <button className=\"btn btn-primary\"\n          key={i}\n          onClick={() => setPage(i)}\n        >{i}</button>\n      );\n    }\n  }\n  // console.log(pageButtons)\n  return pageButtons\n}\n\nexport default SingleCharacter;","import React from \"react\";\n// import of Apollo stuff\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport SingleCharacter from \"./components/singleCharacter\";\n// external component\n// import AllCharacters from \"./components/allCharacters\";\n// Apollo client\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql/\"\n});\n// functional component\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <div className=\"container\">\n          {/* <AllCharacters /> */}\n          <SingleCharacter />\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}